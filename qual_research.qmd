---
format: 
  revealjs:
    slide-number: false
    logo: images/cp_hex_logo.png
    theme: night
    embed-resources: true
editor: visual
bibliography: references.bib
---

##  {background-image="images/code-backdrop.jpg" background-position="cover" aria-label="A screen covered in computer programming code."}

::: {style="font-size: 3em; color: #FFFFFF;"}
**Evalutating Students' Code as a Learning Product**
:::


::: {style="font-size: 3em; color: #FFFFFF;"}
Today's layout
:::

. . .

</br>

1. How has students' code been analyzed? 

. . .

2. Another (qualitative) way to analyze students' code

. . .

3. Examples of how this framework could be used

. . .

<center><http://bit.ly/imsi-coding-code></center>

## 

::: {style="font-size: 3em; color: #FFFFFF;"}
A bit about me...
:::

::: columns
::: {.column width="40%"}
::: {style="font-size: 0.75em; color: #FFFFFF;"}
> "Supporting Data-Intensive Environmental Science Research: Data Science Skills for Scientific Practitioners of Statistics"
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{r}
#| out-width: 80%
#| fig-alt: "An image of an oceanside landscape, with a field of blooming California poppy flowers in the background."
knitr::include_graphics("images/buchon.JPG")
```
:::
:::

##  {background-color="#34605f"}

::: {style="font-size: 3.5em; color: #000000;"}
How has students' code been analyzed?
:::

## In the beginning there was...

::: columns
::: {.column width="80%"}

::: {style="font-size: 2.5em"}
[BlueJ](https://bluej.org/)
:::
:::

::: {.column width="5%"}
:::

::: {.column width="15%"}
![](images/blue-jay.png){fig-alt="An silouette of a blue jay."}
:::
:::

:::{.incremental}
- Common errors
- Amount of time students spend between compilations [@jadud-2005] 
- Describe students' compilation behavior [@jadud-2006]
- Categorize compilation errors [@mccall]
:::

## Then came

A comparison of formula and tidyverse syntaxes [@amelia]

. . .

- lines of code produced
- unique functions used

## And finally 

Rafalski et al. [-@rafalski] extended these same ideas to compare students' ability to write accurate code across three different R syntaxes: the tidyverse, base R, and the tilde style.

. . .

- number of errors
- time completion 

##  {background-color="#34605f"}

::: {style="font-size: 3em; color: #000000;"}
An alternative way to analyze students' code
:::

## 

::: {style="font-size: 1.5em; color: #FFFFFF;"}
The Importance of Students’ Attention to Program State [@lewis2012]
:::

::: columns
::: {.column width="60%"}

::: {style="font-size: 0.75em"}
- Attends to **both** the code produced by a student and their learning process 

- Pairs a student's code with their debugging behavior side-by-side
:::
:::

::: {.column width="5%"}
:::

::: {.column width="25%"}

:::{.r-stretch}
![](images/debug.png){fig-alt="A student looking sad while typing on a computer, the image of a bug over the top of their code is previewed above their head."}
:::
:::
:::

. . .

::: {style="font-size: 0.75em"}

> These analyses of students’ code should not be few and far between. Students’ code poses a unique avenue for qualitative research in the teaching and learning of computing. 

:::

## 

::: {style="font-size: 3em; color: #FFFFFF;"}
Warm-up (90 seconds)
:::

What process would you expect a student to use to create a 
multivariate scatterplot, with different colors for different 
groups?

## 

::: {style="font-size: 2em; color: #FFFFFF;"}
A framework for analyzing student's code [@schulte2008]
:::

::: {style="font-size: 0.5em;"}
|                    | Text Surface                                                              | Program Execution                                                      | Function                                                                                   |
|:------------------|------------------|------------------|------------------|
| **Macrostructure** | Understanding the overall structure of the program                        | Understanding the "algorithm" of the program                           | Understanding the goal / purpose of the program (in its context)                           |
| **Relations**      | References between blocks, e.g., method calls, object creation            | Sequence of method calls, object sequence diagrams                     | Understanding how sub-goals are related to goals, how function is achieved by subfunctions |
| **Blocks**         | Regions of interest (ROI) that syntactically or semantically build a unit | Operation of a block, a method, or a ROI (as a sequence of statements) | Function of a block, may be seen as a sub-goal                                             |
| **Atoms**          | Language elements                                                         | Operation of a statement                                               | Function of a statement, only understandable in context                                    |
:::

## 

::: {style="font-size: 2.5em; color: #FFFFFF;"}
Coding student's code
:::

</br>

::: {style="font-size: 1.25em;"}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 1]
```
:::

. . .

</br>

::: columns
::: {.column width="45%"}
**Descriptive code**

::: {style="font-size: 0.75em;"}
> "Filters a vector of values using extraction operator, based on an equality relation with a variable selected from dataframe using `$` operator"
:::
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
**In-vivo code**

::: {style="font-size: 0.75em;"}
> "Uses `[ ]` and `==` to filter vector, uses `$` to select variable"
:::
:::
:::

## 

::: {style="font-size: 2em; color: #FFFFFF;"}
Uncovering emergent themes
:::

::: {style="font-size: 0.75em;"}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

linearAnterior <- lm(PADataNoOutlier$Lipid ~ PADataNoOutlier$PSUA)

early <- subset(RPMA2Growth, StockYear < 2006)	

Weight5 <- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 5], na.rm = TRUE)

gas <- gas[!(substr(gas$sampleID,3,3) %in% c("b","c")), ]	

obsD <- subset(gas, gas$carboy == "D")$N15_N2_Ar

lowerCIBound <- pMat[1:mlleIndex,1][which.min(abs(mlleCI+likelihoods[1:mlleIndex]))]
```
:::

<!-- </br> -->

::: columns
::: {.column width="50%"}
**Data wrangling**

::: {style="font-size: 0.65em;"}
> Statements of code whose purpose is to prepare a dataset for analysis and / or visualization
:::
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
::: {style="font-size: 0.75em;"}
**Sub-themes**

-   selecting variables
-   filtering observations
-   mutating variables
:::
:::
:::

## 

::: {style="font-size: 2em; color: #FFFFFF;"}
An alternative direction
:::

</br>

::: columns
::: {.column width="20%"}
::: {style="font-size: 1.5em; color: #FFFFFF;"}
Process coding:
:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}
::: {style="font-size: 0.75em; color: #FFFFFF;"}
> uses gerunds ("-ing" words) to connote action in the data [@saldana]
:::
:::
:::

. . .

</br>

::: {style="font-size: 0.75em;"}
-   Particularly relevant to describing the processes of human actions
    -   can be "strategic, routine, random, novel, automatic, and / or thoughtful" [@corbin, p. 247].
-   Can be intertwined with time, such that actions can emerge, change, or occur in particular sequences.
:::

## 

::: {style="font-size: 2em; color: #FFFFFF;"}
Practical considerations
:::

::: columns
::: {.column width="45%"}
**How much code should I collect?**

::: {style="font-size: 0.75em;"}
::: incremental
-   Driven by the research question!
    -   Amount of each student's code
    -   Number of students
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
**How do readers trust my analysis?**

::: {style="font-size: 0.75em;"}
::: incremental
-   Trust comes from:

    -   confirmability
    -   reliability
    -   credibility
    -   transferability
:::
:::
:::
:::

. . .

</br> Excellent resources: Creswell & Poth [-@creswell]; Merriam & Tisdell [-@merriam-tisdell]; Miles et al. [-@miles]

<!-- researcher bias -->

<!-- stable across researchers -->

<!-- findings paint authentic portrait of data -->

<!-- conclusions can be transferred to other contexts  -->

## 

::: {style="font-size: 2em; color: #FFFFFF;"}
How could this be used?
:::

::: columns
::: {.column width="22%"}
::: {style="font-size: 0.95em;"}
**Concept dependence**
:::

::: {style="font-size: 0.65em;"}
> How does a student's concept model of a dataset inform how they filter data?

(atoms; program execution)
:::
:::

::: {.column width="2%"}
:::

::: {.column width="22%"}
::: {style="font-size: 0.95em;"}
**Program environment**
:::

::: {style="font-size: 0.65em;"}
> How do the visualizations produced by students who learn ggplot differ from those who learn "base" R?

(blocks; program execution)
:::
:::

::: {.column width="4%"}
:::

::: {.column width="22%"}
::: {style="font-size: 0.95em;"}
**Linguistic structure**
:::

::: {style="font-size: 0.65em;"}
> How do students name objects they will use later?

(relationships; text)
:::
:::

::: {.column width="2%"}
:::

::: {.column width="22%"}
::: {style="font-size: 0.95em;"}
**Learning trajectory**
:::

::: {style="font-size: 0.65em;"}
> How do students' exploratory data analyses change over the duration of a course?

(macrostructure; function / purpose)
:::
:::
:::

## 

::: {style="font-size: 2em; color: #FFFFFF;"}
Why is this important for data science education?
:::

Theobold et al. [-@theobold-jsdse]

. . .

</br>

::: {style="font-size: 1.5em; color: #e28743;"}
How can we distinguish merely interesting learning from effective learning [@wiggins]?
:::

## 

::: {style="font-size: 3em; color: #FFFFFF;"}
Questions?
:::

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/conversation.jpg")
```

## References
